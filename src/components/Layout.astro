---
import Footer from './Footer.astro'
import Header from './Header.astro'

interface Props {
    style: string
}
const {style} = Astro.props
---

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="descripcion" content="Portafolio Andres Prado">
    <link rel="icon" type="image" href="./imagenes/books-removebg-preview.webp">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="viwe-transition" content="same-origin">
    <title>Portafolio Andres Prado</title> 
</head>

    <body id="content" class={`bg-gray-200 dark:bg-[#19202b] text-[#252323] dark:text-gray-200  ${style}`}>

    <main>
        <Header/>
                <slot/>
        <Footer/>
    </main>

    </body>


</html>



<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.7.0/flowbite.min.js"></script>

<style is:global>
    :root {
        --accent: 124, 58, 237;
        --accent-gradient: linear-gradient(45deg, rgb(var(--accent)), #da62c4 30%, white 60%);    
    }
    html {
        font-family: system-ui sans-serif;
        background-color: #E5E7EB;
    }
    code {
        font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
    }

    /* Agrega la propiedad "scrollbar-color" a la clase que define el estilo de la barra lateral de scroll */
::-webkit-scrollbar {
    scrollbar-color: #19202b #19202b ;
}

/* Define los valores para "scrollbar-color" que deseas utilizar */
::-webkit-scrollbar-track {
    background-color: #19202b;
}

::-webkit-scrollbar-thumb {
    background-color: #19202b;
}

/* Agrega la propiedad "scrollbar-width" para definir el ancho de la barra de desplazamiento */
::-webkit-scrollbar {
    scrollbar-width: thin;
}

    
/* @keyframes fade-in {
    from { opacity: 0; }
}

@keyframes fade-out {
    to { opacity: 0; }
}

@keyframes slide-from-right {
    from { transform: translateX(70%); 
    }
}

@keyframes slide-to-left {
    to { transform: translateX(-100%); }
}

::view-transition-old(root) {
    animation: 300ms cubic-bezier(0.4, 0, 1, 1) both fade-out,
    800ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
    animation-duration: 800ms;
}

::view-transition-new(root) {
    animation: 210ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,
    800ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;
    animation-duration: 800ms;
} */

::view-transition-old(root),
::view-transition-new(root) {
    animation-duration: 700ms;
}
</style>
<script>
    {if (document.startViewTransition) {
    window.navigation.addEventListener('navigate', (event) => {
        const toUrl = new URL(event.destination.url);

      // es una página externa? si es así, lo ignoramos
        if (location.origin !== toUrl.origin) return;

      // si es una navegación en el mismo dominio (origen)
        event.intercept({
        async handler() {
          // vamos a cargar la página de destino
          // utilizando un fetch para obtener el HTML
          const response = await fetch(toUrl.pathname); // /clean-code
            const text = await response.text();
          // quedarnos sólo con el contenido del html dentro de la etiqueta body
          // usamos un regex para extraerlo
            const data = text.match(/<body[^>]*>([\s\S]*)<\/body>/i)[1];

          // utilizar la api de View Transition API
            document.startViewTransition(() => {
            // el scroll hacia arriba del todo
            document.body.innerHTML = data;
            document.documentElement.scrollTop = 1;
            });
        },
        });
    });
    }}
</script>